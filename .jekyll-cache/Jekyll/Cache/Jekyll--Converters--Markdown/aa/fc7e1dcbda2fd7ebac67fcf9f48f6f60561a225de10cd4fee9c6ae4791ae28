I"ÿO<h1 id="its-all-polygons">It‚Äôs all Polygons</h1>

<p>You ever do that exercise in art class way back when, where you would draw a bunch of small points and a few larger points and join them together using a straight edge? You‚Äôd end up with a brutal looking geometric image, then you‚Äôd colour it in to make it look groovy.</p>

<p>It‚Äôs a lot of fun. Weirdly calming‚Ä¶ Anyway I recently discovered a programmatic approach to generating low-poly art that works on this principle.</p>

<p><img src="http://localhost:4000/assets/images/tutorials/project-1/geo.jpg" alt="png" /></p>

<p>The approach is straight forward.</p>

<hr />

<ol>
  <li>Load an image an process it to highlight distinct areas of detail.</li>
  <li>Connect areas of interest with line segments.</li>
  <li>Triangulate vertices to generate polygons.</li>
  <li>Determine the colour of the triangles.</li>
  <li>Compute and output a final image.</li>
</ol>

<hr />

<p>Let‚Äôs begin by importing our dependencies and loading our image.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">import</span> <span class="nn">pygame.gfxdraw</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">scipy.spatial</span> <span class="kn">import</span> <span class="n">Delaunay</span>
<span class="kn">from</span> <span class="nn">scipy.ndimage</span> <span class="kn">import</span> <span class="n">gaussian_filter</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</code></pre></div></div>

<p>To highlight distinct areas in our image we‚Äôre going to apply ‚Äúblurring‚Äù to the original sample.  We‚Äôll be using a Gaussian filter included in the scipy library to reduce the complexity of the image by removing smaller features.</p>

<p>We‚Äôll be applying two Gaussian filters of varying intensity to our original sample to generate two blurred images. We will then measure the differences between them to pinpoint areas of importance to us.</p>

<p>Before we add a filter lets reduce the complexity by flattening the image into a 2D array by representing the image as a ratio of its RGB (Red, Green, Blue) pixels.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input_image</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">surfarray</span><span class="p">.</span><span class="n">pixels3d</span><span class="p">(</span><span class="n">pygame</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">"/home/vent/fruit.png"</span><span class="p">))</span>
<span class="n">RGB_weight</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.2126</span><span class="p">,</span> <span class="mf">0.7152</span><span class="p">,</span> <span class="mf">0.0722</span><span class="p">])</span>
<span class="n">grayscale</span> <span class="o">=</span> <span class="p">(</span><span class="n">input_image</span> <span class="o">*</span> <span class="n">RGB_weight</span><span class="p">).</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">grayscale</span><span class="p">.</span><span class="n">T</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/tutorials/project-1/output_3_0.png" alt="png" /></p>

<p>We can then apply the Gaussian filters on the flattened image and then workout the difference between the two newly blurred images.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">blur</span> <span class="o">=</span> <span class="n">gaussian_filter</span><span class="p">(</span><span class="n">grayscale</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">"reflect"</span><span class="p">)</span>
<span class="n">blur_x2</span> <span class="o">=</span> <span class="n">gaussian_filter</span><span class="p">(</span><span class="n">grayscale</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">"reflect"</span><span class="p">)</span>

<span class="c1"># Take the difference, deweight negatives, normalise
</span><span class="n">difference</span> <span class="o">=</span> <span class="p">(</span><span class="n">blur</span> <span class="o">-</span> <span class="n">blur_x2</span><span class="p">)</span>
<span class="n">difference</span><span class="p">[</span><span class="n">difference</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">*=</span> <span class="mf">0.1</span>
<span class="n">difference</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">difference</span><span class="p">)</span> <span class="o">/</span> <span class="n">difference</span><span class="p">.</span><span class="nb">max</span><span class="p">())</span>

<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">difference</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_5_1.png" alt="png" /></p>

<p>Now that we‚Äôve found points of interest. We‚Äôll  reduce the points further by picking at random x and y coordinates and eliminating points below a certain luminosity threshold.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sample</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1000000</span><span class="p">):</span>
    <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
    <span class="n">xs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">n</span><span class="p">)</span>
    <span class="n">ys</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">n</span><span class="p">)</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">ref</span><span class="p">[</span><span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">]</span>
    <span class="n">accept</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">n</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">value</span>
    <span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="n">xs</span><span class="p">[</span><span class="n">accept</span><span class="p">],</span> <span class="n">ys</span><span class="p">[</span><span class="n">accept</span><span class="p">]])</span>
    <span class="k">return</span> <span class="n">points</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">value</span><span class="p">[</span><span class="n">accept</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">samples</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">difference</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">samples</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="o">-</span><span class="n">samples</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">v</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">edgecolors</span><span class="o">=</span><span class="s">"none"</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">"viridis"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_8_1.png" alt="png" /></p>

<p>To triangulate between vertices we‚Äôll be using Delaunay triangulation included in the scipy library.</p>

<p>To determine the colour of a triangle we will assign each pixel to a triangle. The average of all the pixels within the triangle will determine the final colour of the triangle.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_colour_of_tri</span><span class="p">(</span><span class="n">tri</span><span class="p">,</span> <span class="n">image</span><span class="p">):</span>
    <span class="n">colours</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">[])</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">):</span>
            <span class="c1"># Gets the index of the triangle the point is in
</span>            <span class="n">index</span> <span class="o">=</span> <span class="n">tri</span><span class="p">.</span><span class="n">find_simplex</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
            <span class="n">colours</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">index</span><span class="p">)].</span><span class="n">append</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="p">:])</span>
    <span class="c1"># For each triangle, find the average colour
</span>    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">array</span> <span class="ow">in</span> <span class="n">colours</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">colours</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">array</span><span class="p">).</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">colours</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">tri</span><span class="p">,</span> <span class="n">colours</span><span class="p">,</span> <span class="n">screen</span><span class="p">,</span> <span class="n">upscale</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">screen</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">colours</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">tri</span><span class="p">.</span><span class="n">points</span><span class="p">[</span><span class="n">tri</span><span class="p">.</span><span class="n">simplices</span><span class="p">[</span><span class="n">key</span><span class="p">]]</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">gfxdraw</span><span class="p">.</span><span class="n">filled_polygon</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span> <span class="o">*</span> <span class="n">upscale</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">gfxdraw</span><span class="p">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span> <span class="o">*</span> <span class="n">upscale</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span>
</code></pre></div></div>

<p>That should be it. Let‚Äôs plot the final image.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">inp</span><span class="p">.</span><span class="n">shape</span>
<span class="n">upscale</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Surface</span><span class="p">((</span><span class="n">w</span> <span class="o">*</span> <span class="n">upscale</span><span class="p">,</span> <span class="n">h</span> <span class="o">*</span> <span class="n">upscale</span><span class="p">))</span>
<span class="n">screen</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">inp</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)))</span>
<span class="n">corners</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">w</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">w</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">h</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)])</span>
<span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">corners</span><span class="p">,</span> <span class="n">samples</span><span class="p">))</span>

<span class="n">outdir</span> <span class="o">=</span> <span class="s">"lowpoly/output/"</span>
<span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">outdir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">tri</span> <span class="o">=</span> <span class="n">Delaunay</span><span class="p">(</span><span class="n">points</span><span class="p">[:</span><span class="n">n</span><span class="p">,</span> <span class="p">:])</span>
    <span class="n">colours</span> <span class="o">=</span> <span class="n">get_colour_of_tri</span><span class="p">(</span><span class="n">tri</span><span class="p">,</span> <span class="n">inp</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">draw</span><span class="p">(</span><span class="n">tri</span><span class="p">,</span> <span class="n">colours</span><span class="p">,</span> <span class="n">screen</span><span class="p">,</span> <span class="n">upscale</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">smoothscale</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
    <span class="n">pygame</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="sa">f</span><span class="s">"lo-poli/output/</span><span class="si">{</span><span class="n">i</span><span class="si">:</span><span class="mi">04</span><span class="n">d</span><span class="si">}</span><span class="s">.png"</span><span class="p">)</span>
</code></pre></div></div>
:ET